// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FFCloudSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import FFCloudSDK
import Foundation
import Logboard
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class FFCVideoRoomOptions {
  final public let dimensions: FFCloudSDK.FFCDimensions
  final public let videoEncoding: FFCloudSDK.FFCVideoEncoding
  public init(dimensions: FFCloudSDK.FFCDimensions = FFCDimensions(), videoEncoding: FFCloudSDK.FFCVideoEncoding = FFCVideoEncoding())
  @objc deinit
}
public class FFCCameraCaptureOptions {
  final public let dimensions: FFCloudSDK.FFCDimensions
  public init(dimensions: FFCloudSDK.FFCDimensions = FFCDimensions())
  @objc deinit
}
public class FFCDimensions {
  final public let width: Swift.Int32
  final public let height: Swift.Int32
  public init(width: Swift.Int32 = 1280, height: Swift.Int32 = 720)
  @objc deinit
}
public class FFCVideoPublishOptions {
  final public let videoEncoding: FFCloudSDK.FFCVideoEncoding
  public init(videoEncoding: FFCloudSDK.FFCVideoEncoding = FFCVideoEncoding())
  @objc deinit
}
public class FFCVideoEncoding {
  final public let maxBitrate: Swift.Int
  final public let maxFps: Swift.Int
  public init(maxBitrate: Swift.Int = 1_700_000, maxFps: Swift.Int = 30)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FFCApi {
  public typealias APIResult<T> = ((FFCloudSDK.FFCApi.Result<T>) -> Swift.Void)? where T : Swift.Decodable
  @_hasMissingDesignatedInitializers final public class Model<T> where T : Swift.Decodable {
    final public let value: T
    @objc deinit
  }
  public enum Result<T> where T : Swift.Decodable {
    case Error(any Swift.Error)
    case Fail(FFCloudSDK.FFCApi.Model<FFCloudSDK.FFCFail>)
    case Success(FFCloudSDK.FFCApi.Model<T>)
  }
  @objc deinit
}
extension FFCloudSDK.FFCApi {
  public func createVideoRoom(title: Swift.String, description: Swift.String, password: Swift.String? = nil, customType: Swift.String? = nil, customData: [Swift.String : Swift.String]? = nil, completion: FFCloudSDK.FFCApi.APIResult<FFCloudSDK.VideoRoomInfo>)
  public func listVideoRooms(videoRoomState: Swift.String? = nil, type: Swift.String? = nil, sortBy: Swift.String? = nil, page: Swift.UInt64? = nil, pageSize: Swift.UInt64? = nil, completion: FFCloudSDK.FFCApi.APIResult<FFCloudSDK.VideoRoomInfoList>)
  public func getVideoRoom(videoRoomId: Swift.UInt64, completion: FFCloudSDK.FFCApi.APIResult<FFCloudSDK.VideoRoomInfo>)
  public func issueWebRtcVideoRoomToken(videoRoomId: Swift.UInt64, password: Swift.String? = nil, customData: [Swift.String : Swift.String]? = nil, completion: FFCloudSDK.FFCApi.APIResult<FFCloudSDK.WebRtcVideoTokenInfo>)
}
@objc @_inheritsConvenienceInitializers public class FFCloud : ObjectiveC.NSObject {
  public static func api(url: Swift.String, accessToken: Swift.String) -> FFCloudSDK.FFCApi
  @objc override dynamic public init()
  @objc deinit
}
public enum FFCErrorType : Swift.Int, Swift.Sendable {
  case unknown
  case cancelled
  case timedOut
  case failedToParseUrl
  case failedToConvertData
  case invalidState
  case webRTC
  case network
  case duplicateIdentity
  case serverShutdown
  case participantRemoved
  case roomDeleted
  case stateMismatch
  case joinFailure
  case serverPingTimedOut
  case deviceNotFound
  case captureFormatNotFound
  case unableToResolveFPSRange
  case capturerDimensionsNotResolved
  case deviceAccessDenied
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension FFCloudSDK.FFCErrorType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public typealias HttpCompletion = ((Swift.Int, Foundation.Data?, (any Swift.Error)?) -> Swift.Void)?
public struct FFCFail : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoRoomInfo : Swift.Decodable {
  public let id: Swift.UInt64
  public let uuid: Swift.String
  public let type: Swift.String?
  public let videoRoomState: Swift.String?
  public let accessLevel: Swift.String?
  public let app: FFCloudSDK.AppInfo
  public let member: FFCloudSDK.MemberInfo
  public let title: Swift.String?
  public let description: Swift.String?
  public let customType: Swift.String?
  public let customData: [Swift.String : Swift.String]?
  public let createdAt: Swift.String
  public let lastModifiedAt: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct VideoRoomInfoList : Swift.Decodable {
  public let content: [FFCloudSDK.VideoRoomInfo]
  public let first: Swift.Bool
  public let last: Swift.Bool
  public let empty: Swift.Bool
  public let totalPages: Swift.UInt64
  public let totalElements: Swift.UInt64
  public let numberOfElements: Swift.UInt64
  public let size: Swift.UInt64
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebRtcVideoTokenInfo : Swift.Decodable {
  public let webRtcServerUrl: Swift.String
  public let webRtcToken: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppInfo : Swift.Decodable {
  public let id: Swift.UInt64
  public let name: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct MemberInfo : Swift.Decodable {
  public let id: Swift.UInt64
  public let appUserId: Swift.String
  public let appUserName: Swift.String?
  public let appUserProfileImgUrl: Swift.String?
  public let customType: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
extension FFCloudSDK.FFCErrorType : Swift.Equatable {}
extension FFCloudSDK.FFCErrorType : Swift.Hashable {}
extension FFCloudSDK.FFCErrorType : Swift.RawRepresentable {}
